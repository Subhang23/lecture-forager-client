{"ast":null,"code":"var _jsxFileName = \"/home/ritwiz/Desktop/github.com/lecture-forager/client/src/pages/VideoPlayer/index.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { useState, useEffect, createRef } from \"react\";\nimport axios from 'axios';\nimport Loader from \"react-loader-spinner\";\nimport VideoPlayerTab from \"../../components/VideoPlayerTab/test.js\";\nimport \"./index.css\";\nimport { SERVER_HOST } from '../../constants';\nimport TextTracks from \"../../components/TextTracks\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function VideoPlayerData({\n  location: {\n    state\n  }\n}) {\n  _s();\n\n  console.log(state);\n  const [loadingOrError, setLoadingOrError] = useState(true);\n  const [text, setText] = useState('');\n  const [transcriptData, setTranscriptData] = useState([]);\n  useEffect(() => {\n    const f = async () => {\n      const {\n        filename,\n        id\n      } = state;\n\n      try {\n        const response = await axios.get(`${SERVER_HOST}/video`, {\n          params: {\n            filename,\n            id\n          }\n        });\n        setLoadingOrError(false);\n        setText(response.data.text);\n        setTranscriptData(response.data.timestamps);\n        console.log(response.data);\n      } catch (err) {\n        console.log(err);\n      }\n    };\n\n    f();\n  }, []);\n\n  if (!transcriptData.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gif_loader\",\n      children: /*#__PURE__*/_jsxDEV(Loader, {\n        type: \"Circles\",\n        color: \"#00BFFF\",\n        height: 100,\n        width: 100\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(VideoPlayer, {\n      transcriptData: transcriptData,\n      text: text,\n      title: state.title,\n      description: state.description,\n      keywords: state.keywords,\n      searchTerm: state.searchTerm\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 12\n    }, this);\n  }\n}\n\n_s(VideoPlayerData, \"NeG01/P4tqtdWkQEr+WXrX2AIM8=\");\n\n_c = VideoPlayerData;\n\nfunction VideoPlayer({\n  transcriptData,\n  text,\n  title,\n  description,\n  keywords,\n  searchTerm\n}) {\n  _s2();\n\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [timer, setTimer] = useState(0);\n  console.log(searchTerm);\n  let refToChild = /*#__PURE__*/createRef();\n\n  function highlightText(currentTime) {\n    transcriptData.forEach((item, i) => {\n      if (item.startTime < currentTime || item.startTime > currentTime + 5) {\n        document.getElementsByClassName(i.toString() + \"_class_id\")[0].style.backgroundColor = \"white\";\n      } else {\n        document.getElementsByClassName(i.toString() + \"_class_id\")[0].style.backgroundColor = \"burlywood\";\n      }\n    });\n  }\n\n  useEffect(() => {\n    highlightText(timer);\n  }, [timer]);\n  setInterval(() => {\n    if (refToChild.current != null) {\n      const currentRef = refToChild.current.state.player.currentTime;\n      highlightText(currentRef);\n    }\n  }, 5000);\n\n  function changeStatus(currentTime, toChange) {\n    if (toChange) {\n      setIsPlaying(prevState => {\n        return !prevState;\n      });\n    }\n\n    setTimer(currentTime);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video_player_box\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video_player_tab\",\n      children: /*#__PURE__*/_jsxDEV(VideoPlayerTab, {\n        changeStatus: changeStatus,\n        ref: refToChild,\n        data: transcriptData,\n        videoInformation: {\n          title,\n          body: description,\n          tags: keywords.split(',')\n        },\n        title: title,\n        description: description,\n        keyword: searchTerm.split(' ')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 10\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text_tab\",\n      children: [!transcriptData.length && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gif_loader\",\n        children: /*#__PURE__*/_jsxDEV(Loader, {\n          type: \"Circles\",\n          color: \"#00BFFF\",\n          height: 100,\n          width: 100\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), transcriptData.length && /*#__PURE__*/_jsxDEV(TextTracks, {\n        data: transcriptData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(VideoPlayer, \"gqQTgOJWJhApncDB5LqHbApzdKQ=\");\n\n_c2 = VideoPlayer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"VideoPlayerData\");\n$RefreshReg$(_c2, \"VideoPlayer\");","map":{"version":3,"sources":["/home/ritwiz/Desktop/github.com/lecture-forager/client/src/pages/VideoPlayer/index.js"],"names":["React","useState","useEffect","createRef","axios","Loader","VideoPlayerTab","SERVER_HOST","TextTracks","VideoPlayerData","location","state","console","log","loadingOrError","setLoadingOrError","text","setText","transcriptData","setTranscriptData","f","filename","id","response","get","params","data","timestamps","err","length","title","description","keywords","searchTerm","VideoPlayer","isPlaying","setIsPlaying","timer","setTimer","refToChild","highlightText","currentTime","forEach","item","i","startTime","document","getElementsByClassName","toString","style","backgroundColor","setInterval","current","currentRef","player","changeStatus","toChange","prevState","body","tags","split"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, createRef } from \"react\";\nimport axios from 'axios';\nimport Loader from \"react-loader-spinner\";\nimport VideoPlayerTab from \"../../components/VideoPlayerTab/test.js\";\nimport \"./index.css\";\nimport { SERVER_HOST } from '../../constants';\n\nimport TextTracks from \"../../components/TextTracks\";\nexport default function VideoPlayerData({ location: { state } }) {\n  console.log(state);\n  const [loadingOrError, setLoadingOrError] = useState(true);\n  const [text, setText] = useState('');\n  const [transcriptData, setTranscriptData] = useState([]);\n\n  useEffect(() => {\n    const f = async () => {\n      const { filename, id } = state;\n      try {\n        const response = await axios.get(`${SERVER_HOST}/video`, {\n          params: {\n            filename,\n            id\n          }\n        });\n        setLoadingOrError(false);\n        setText(response.data.text);\n        setTranscriptData(response.data.timestamps);\n        console.log(response.data)\n      }\n      catch (err) {\n        console.log(err);\n      }\n    }\n\n    f();\n  }, []);\n\n  if (!transcriptData.length) {\n    return (<div className=\"gif_loader\">\n      <Loader type=\"Circles\" color=\"#00BFFF\" height={100} width={100} />\n    </div>)\n  } else {\n    return <VideoPlayer transcriptData={transcriptData} text={text} title={state.title} description={state.description}  keywords={state.keywords} searchTerm={state.searchTerm}/>\n  }\n}\nfunction VideoPlayer({ transcriptData, text, title, description, keywords, searchTerm }) {\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [timer, setTimer] = useState(0);\n  console.log(searchTerm);\n  let refToChild = createRef();\n\n  function highlightText(currentTime) {\n    transcriptData.forEach((item, i) => {\n      if (item.startTime < currentTime || item.startTime > currentTime + 5) {\n        document.getElementsByClassName(\n          i.toString() + \"_class_id\"\n        )[0].style.backgroundColor = \"white\";\n      } else {\n        document.getElementsByClassName(\n          i.toString() + \"_class_id\"\n        )[0].style.backgroundColor = \"burlywood\";\n      }\n    });\n  }\n\n  useEffect(() => {\n    highlightText(timer);\n  }, [timer]);\n\n  setInterval(() => {\n    if (refToChild.current != null) {\n      const currentRef = refToChild.current.state.player.currentTime;\n      highlightText(currentRef);\n    }\n  }, 5000);\n\n  function changeStatus(currentTime, toChange) {\n    if (toChange) {\n      setIsPlaying((prevState) => {\n        return !prevState;\n      });\n    }\n    setTimer(currentTime);\n  }\n\n  return (\n    <div className=\"video_player_box\">\n      <div className=\"video_player_tab\">\n         <VideoPlayerTab\n          changeStatus={changeStatus}\n          ref={refToChild}\n          data={transcriptData}\n          videoInformation={{\n            title,\n            body: description,\n            tags: keywords.split(',')\n          }}\n          title={title}\n          description={description}\n          keyword={searchTerm.split(' ')}\n        /> \n      </div>\n      <div className=\"text_tab\">\n        {!transcriptData.length && (\n          <div className=\"gif_loader\">\n            <Loader type=\"Circles\" color=\"#00BFFF\" height={100} width={100} />\n          </div>\n        )}\n        {transcriptData.length && <TextTracks data={transcriptData} />}\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}