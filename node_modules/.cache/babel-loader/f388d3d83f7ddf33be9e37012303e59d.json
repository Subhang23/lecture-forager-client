{"ast":null,"code":"var _jsxFileName = \"/home/ritwiz/Desktop/github.com/lecture-forager/client/src/pages/UploadPage/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { NotificationManager } from 'react-notifications';\nimport { Loader } from 'react-loader-spinner';\nimport { axios } from 'axios';\nimport { SERVER_HOST } from '../../constants';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UploadPage() {\n  _s();\n\n  const [file, setFile] = useState(null);\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n\n  const getExtension = filename => {\n    return filename.slice(filename.lastIndexOf('.') + 1);\n  };\n\n  const isVideo = ext => {\n    return ['mp4'].indexOf(ext) !== -1;\n  };\n\n  const onChangeHandler = event => {\n    const file = event.target.files[0];\n\n    if (isVideo(getExtension(file.name))) {\n      setFile(file);\n    } else {\n      NotificationManager.error('Please input a valid video file');\n    }\n  };\n\n  const fileUploadHandler = () => {\n    const data = new FormData();\n    data.append('file', file);\n    data.append('title', title);\n    data.append('description', description);\n    data.append('fileName', file.name);\n    console.log(data);\n    axios.post(``, data).then(res => {\n      // then print response status\n      toast.success('upload success');\n    }).catch(err => {\n      // then print response status\n      toast.error('upload fail');\n    });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (!title || !description || !file) {\n      return NotificationManager.error(\"cannot fill with empty fields\");\n    }\n\n    console.log(title, description, file);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lf_file_upload\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      method: \"post\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group files\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Upload Your File \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 41\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          name: \"file\",\n          className: \"form-control\",\n          onChange: onChangeHandler\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 41\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group lf_form_row\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 41\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Enter video title\",\n          className: \"form-control\",\n          onChange: e => setTitle(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 41\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group lf_form_row\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Description\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 41\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          placeholder: \"Enter video description\",\n          className: \"form-control\",\n          onChange: e => setDescription(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 41\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 33\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-6 pull-right\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          width: \"100%\",\n          type: \"button\",\n          className: \"btn btn-info lf_submit_btn\",\n          onClick: handleSubmit,\n          children: \"Upload File\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 41\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 25\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 17\n  }, this);\n}\n\n_s(UploadPage, \"HQ3o8gmZ6p7O/cWlCnLOWoKe5gk=\");\n\n_c = UploadPage;\nexport default UploadPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"UploadPage\");","map":{"version":3,"sources":["/home/ritwiz/Desktop/github.com/lecture-forager/client/src/pages/UploadPage/index.js"],"names":["React","useState","NotificationManager","Loader","axios","SERVER_HOST","UploadPage","file","setFile","title","setTitle","description","setDescription","getExtension","filename","slice","lastIndexOf","isVideo","ext","indexOf","onChangeHandler","event","target","files","name","error","fileUploadHandler","data","FormData","append","console","log","post","then","res","toast","success","catch","err","handleSubmit","preventDefault","e","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { NotificationManager  } from 'react-notifications';\nimport { Loader } from 'react-loader-spinner';\nimport { axios } from 'axios';\nimport { SERVER_HOST } from '../../constants';\n\nimport './index.css';\n\nfunction UploadPage() {\n        const [file, setFile] = useState(null);\n        const [title, setTitle] = useState('');\n        const [description, setDescription] = useState('');\n\n        const getExtension = filename => {\n                return filename.slice(filename.lastIndexOf('.')+1);\n        }\n        const isVideo = (ext) => {\n               return ['mp4'].indexOf(ext) !== -1;\n        }\n        const onChangeHandler = event => {\n                const file = event.target.files[0];\n                if (isVideo(getExtension(file.name))) {\n                        setFile(file);\n                } else {\n                        NotificationManager.error('Please input a valid video file');\n                }\n        }\n        const fileUploadHandler = () => {\n                const data = new FormData()\n                data.append('file', file)\n                data.append('title', title);\n                data.append('description', description);\n                data.append('fileName', file.name)\n                console.log(data);\n                axios.post(``, data)\n                  .then(res => { // then print response status\n                    toast.success('upload success')\n                  })\n                  .catch(err => { // then print response status\n                    toast.error('upload fail')\n                  })\n             \n              };\n        const handleSubmit = event => {\n                event.preventDefault();\n                if (!title || !description || !file) {\n                    return NotificationManager.error(\"cannot fill with empty fields\");\n                }\n                console.log(title, description, file);\n        }\n\n        return (\n                <div className=\"lf_file_upload\">\n                        <form method=\"post\">\n                                <div className=\"form-group files\">\n                                        <label>Upload Your File </label>\n                                        <input type=\"file\" name=\"file\" className=\"form-control\" onChange={onChangeHandler} />\n                                </div>\n                                <div className=\"form-group lf_form_row\">\n                                        <label>Title</label>\n                                        <input placeholder=\"Enter video title\" className=\"form-control\" onChange={(e) => setTitle(e.target.value)} />\n                                </div>\n                                <div className=\"form-group lf_form_row\">\n                                        <label>Description</label>\n                                        <input placeholder=\"Enter video description\" className=\"form-control\" onChange={(e) => setDescription(e.target.value)} />\n                                </div>\n                                <div className=\"col-md-6 pull-right\">\n                                        <button width=\"100%\" type=\"button\" className=\"btn btn-info lf_submit_btn\" onClick={handleSubmit}>Upload File</button>\n                                </div>\n                        </form>\n                </div>\n        )\n}\n\nexport default UploadPage;"]},"metadata":{},"sourceType":"module"}